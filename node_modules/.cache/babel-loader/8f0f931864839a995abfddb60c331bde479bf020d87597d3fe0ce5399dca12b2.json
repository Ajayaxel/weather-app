{"ast":null,"code":"var _jsxFileName = \"C:\\\\wetaher_app\\\\my-app\\\\src\\\\Components\\\\BackgroundLayout.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useStateContext } from '../Context';\n//images\nimport Clear from '../assets/images/Clear.jpg';\nimport Fog from '../assets/images/fog.png';\nimport Cloudy from '../assets/images/Cloudy.jpg';\nimport Rainy from '../assets/images/Rainy.jpg';\nimport Snow from '../assets/images/snow.jpg';\nimport Stormy from '../assets/images/Stormy.jpg';\nimport Sunny from '../assets/images/Sunny.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundLayout = () => {\n  _s();\n  const {\n    weather\n  } = useStateContext();\n  const [image, setImage] = useState(Clear);\n  useEffect(() => {\n    if (weather.conditions) {\n      let imageString = weather.conditions;\n      if (imageString.toLowerCase().includes('clear')) {\n        setImage(Clear);\n      } else if (imageString.toLowerCase().includes('cloud')) {\n        setImage(Cloudy);\n      } else if (imageString.toLowerCase().includes('rain') || imageString.toLowerCase().includes('shower')) {\n        setImage(Rainy);\n      } else if (imageString.toLowerCase().includes('snow')) {\n        setImage(Snow);\n      } else if (imageString.toLowerCase().includes('fog')) {\n        setImage(Fog);\n      } else if (imageString.toLowerCase().includes('thunder') || imageString.toLowerCase().includes('storm')) {\n        setImage(Stormy);\n      }\n    }\n  }, [weather]);\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: image,\n    alt: \"weather_image\",\n    className: \"h-screen w-full fixed left-0 top-0 -z-[10]\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(BackgroundLayout, \"XaTTMVbfEE/qJHajxzSbN4G6AAY=\", false, function () {\n  return [useStateContext];\n});\n_c = BackgroundLayout;\nexport default BackgroundLayout;\nvar _c;\n$RefreshReg$(_c, \"BackgroundLayout\");","map":{"version":3,"names":["React","useEffect","useState","useStateContext","Clear","Fog","Cloudy","Rainy","Snow","Stormy","Sunny","jsxDEV","_jsxDEV","BackgroundLayout","_s","weather","image","setImage","conditions","imageString","toLowerCase","includes","src","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/wetaher_app/my-app/src/Components/BackgroundLayout.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useStateContext } from '../Context'\n//images\nimport Clear from '../assets/images/Clear.jpg'\nimport Fog from '../assets/images/fog.png'\nimport Cloudy from '../assets/images/Cloudy.jpg'\nimport Rainy from '../assets/images/Rainy.jpg'\nimport Snow from '../assets/images/snow.jpg'\nimport Stormy from '../assets/images/Stormy.jpg'\nimport Sunny from '../assets/images/Sunny.jpg'\n\nconst BackgroundLayout = () => {\n\n  const { weather } = useStateContext()\n  const [image, setImage] = useState(Clear)\n\n  useEffect(() => {\n    if (weather.conditions) {\n      let imageString = weather.conditions\n      if (imageString.toLowerCase().includes('clear')) {\n        setImage(Clear)\n      } else if (imageString.toLowerCase().includes('cloud')) {\n        setImage(Cloudy)\n      } else if (imageString.toLowerCase().includes('rain') || imageString.toLowerCase().includes('shower')) {\n        setImage(Rainy)\n      } else if (imageString.toLowerCase().includes('snow')) {\n        setImage(Snow)\n      } else if (imageString.toLowerCase().includes('fog')) {\n        setImage(Fog)\n      } else if (imageString.toLowerCase().includes('thunder') || imageString.toLowerCase().includes('storm')) {\n        setImage(Stormy)\n      }\n    }\n  }, [weather])\n\n  return (\n    <img src={image} alt=\"weather_image\" className='h-screen w-full fixed left-0 top-0 -z-[10]' />\n  )\n}\n\nexport default BackgroundLayout"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,YAAY;AAC5C;AACA,OAAOC,KAAK,MAAM,4BAA4B;AAC9C,OAAOC,GAAG,MAAM,0BAA0B;AAC1C,OAAOC,MAAM,MAAM,6BAA6B;AAChD,OAAOC,KAAK,MAAM,4BAA4B;AAC9C,OAAOC,IAAI,MAAM,2BAA2B;AAC5C,OAAOC,MAAM,MAAM,6BAA6B;AAChD,OAAOC,KAAK,MAAM,4BAA4B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE7B,MAAM;IAAEC;EAAQ,CAAC,GAAGZ,eAAe,CAAC,CAAC;EACrC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAACE,KAAK,CAAC;EAEzCH,SAAS,CAAC,MAAM;IACd,IAAIc,OAAO,CAACG,UAAU,EAAE;MACtB,IAAIC,WAAW,GAAGJ,OAAO,CAACG,UAAU;MACpC,IAAIC,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC/CJ,QAAQ,CAACb,KAAK,CAAC;MACjB,CAAC,MAAM,IAAIe,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACtDJ,QAAQ,CAACX,MAAM,CAAC;MAClB,CAAC,MAAM,IAAIa,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,IAAIF,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACrGJ,QAAQ,CAACV,KAAK,CAAC;MACjB,CAAC,MAAM,IAAIY,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACrDJ,QAAQ,CAACT,IAAI,CAAC;MAChB,CAAC,MAAM,IAAIW,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;QACpDJ,QAAQ,CAACZ,GAAG,CAAC;MACf,CAAC,MAAM,IAAIc,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,SAAS,CAAC,IAAIF,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACvGJ,QAAQ,CAACR,MAAM,CAAC;MAClB;IACF;EACF,CAAC,EAAE,CAACM,OAAO,CAAC,CAAC;EAEb,oBACEH,OAAA;IAAKU,GAAG,EAAEN,KAAM;IAACO,GAAG,EAAC,eAAe;IAACC,SAAS,EAAC;EAA4C;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAElG,CAAC;AAAAd,EAAA,CA3BKD,gBAAgB;EAAA,QAEAV,eAAe;AAAA;AAAA0B,EAAA,GAF/BhB,gBAAgB;AA6BtB,eAAeA,gBAAgB;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}